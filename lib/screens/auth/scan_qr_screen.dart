import 'dart:convert';
import 'dart:io';
import 'dart:typed_data';
import 'package:flutter/material.dart';
import 'package:archive/archive.dart';
import 'package:universal_platform/universal_platform.dart';
import 'package:mobile_scanner/mobile_scanner.dart';
// import 'package:image_picker_web/image_picker_web.dart'; // –Ω–µ–∞–∫—Ç—É–∞–ª—å–Ω–æ

import 'mnemonic_restore_screen.dart';

// import 'package:base45/src/base45.dart';

import 'package:qr_code_dart_scan/qr_code_dart_scan.dart';

class ScanQrScreen extends StatelessWidget {
  final String email;

  const ScanQrScreen({Key? key, required this.email}) : super(key: key);

  void _handleQRData(BuildContext context, String qrString) {
    try {
      debugPrint('üì• –°—á–∏—Ç–∞–Ω QR: $qrString');

      final jsonData = jsonDecode(qrString);
      debugPrint('üìñ Parsed JSON: $jsonData');

      if (jsonData is! Map ||
          jsonData['type'] != 'e2e_key' ||
          jsonData['compressed_key'] == null) {
        debugPrint("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç QR: $jsonData");
        _showError(context, "QR-–∫–æ–¥ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω");
        return;
      }

      final compressedKey = base64Decode(jsonData['compressed_key']);
      debugPrint("üì¶ –†–∞—Å–ø–∞–∫–æ–≤–∞–Ω–Ω—ã–π base64 (compressed) length: ${compressedKey.length}");

      final decompressed = ZLibDecoder().decodeBytes(compressedKey);
      debugPrint("üîì –†–∞—Å–ø–∞–∫–æ–≤–∞–Ω–Ω—ã–π –∫–ª—é—á –¥–ª–∏–Ω–∞: ${decompressed.length}");

      final decryptedKeyBase64 = base64Encode(decompressed);
      debugPrint("‚úÖ –ì–æ—Ç–æ–≤–æ. –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —ç–∫—Ä–∞–Ω –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è");

      Navigator.of(context).pushReplacement(
        MaterialPageRoute(
          builder: (_) => MnemonicRestoreScreen(
            email: email,
            encryptedPrivateKey: decryptedKeyBase64,
          ),
        ),
      );
    } catch (e, st) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ QR: $e');
      debugPrintStack(stackTrace: st);
      _showError(context, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ QR");
    }
  }

  void _showError(BuildContext context, String message) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(content: Text(message), backgroundColor: Colors.red),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ QR')),
      body: QRCodeDartScanView(
        typeScan: TypeScan.live,
        onCapture: (result) {
          try {
            final qrText = result.text;
            if (qrText.isNotEmpty) {
              _handleQRData(context, qrText);
            } else {
              debugPrint("‚ö†Ô∏è QR –ø—É—Å—Ç–æ–π");
              _showError(context, "QR-–∫–æ–¥ –ø—É—Å—Ç–æ–π");
            }
          } catch (e) {
            debugPrint("‚ùå –û—à–∏–±–∫–∞ –≤ onCapture: $e");
            _showError(context, "–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è QR: $e");
          }
        },
        imageDecodeOrientation: ImageDecodeOrientation.portrait,
      ),
    );
  }
}